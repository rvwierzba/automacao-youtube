name: Automatizar YouTube Video

on:
  workflow_dispatch: # Permite acionamento manual
  # push:
  #   branches: [ main ] # Descomente para acionar em push para a main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create credentials directory
        run: |
          echo "Criando pasta credentials/..."
          mkdir -p credentials
          echo "Pasta credentials/ criada."

      - name: Decodificar arquivos .base64 do Repositório
        run: |
          echo "--- Iniciando decodificação dos arquivos Base64 do Repositório ---"
          
          INPUT_CS_BASE64="credentials/canal1_client_secret.json.base64"
          OUTPUT_CS_JSON="credentials/client_secret.json"
          if [ -f "$INPUT_CS_BASE64" ]; then
            echo "Decodificando client_secret de $INPUT_CS_BASE64 para $OUTPUT_CS_JSON..."
            openssl base64 -d -in "$INPUT_CS_BASE64" -out "$OUTPUT_CS_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_CS_JSON" ]; then 
              echo "ERRO CRÍTICO: Falha ao decodificar client_secret ou o arquivo JSON resultante está vazio."
              exit 1
            fi
            echo "client_secret.json decodificado com sucesso."
          else
            echo "ERRO CRÍTICO: Arquivo Base64 do client_secret ($INPUT_CS_BASE64) NÃO encontrado."
            exit 1
          fi
          
          INPUT_TOKEN_BASE64="credentials/canal1_token.json.base64"
          OUTPUT_TOKEN_JSON="credentials/token.json"
          if [ -f "$INPUT_TOKEN_BASE64" ]; then
            echo "Decodificando token de $INPUT_TOKEN_BASE64 para $OUTPUT_TOKEN_JSON..."
            openssl base64 -d -in "$INPUT_TOKEN_BASE64" -out "$OUTPUT_TOKEN_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_TOKEN_JSON" ]; then
              # AVISO em vez de erro aqui para permitir que o Python tente o refresh,
              # mas idealmente este arquivo deve ser válido.
              echo "AVISO: Falha ao decodificar token ou o arquivo JSON resultante está vazio. O script Python tentará o refresh."
              # Criar um arquivo token.json vazio ou com estrutura mínima pode ser necessário se o Python esperar que ele exista.
              # No entanto, a lógica atual do Python lida com token.json não existente.
            else
              echo "token.json decodificado com sucesso."
            fi
          else
            # Se o token.json.base64 não existe, o Python tentará o fluxo completo ou falhará se não conseguir.
            echo "AVISO: Arquivo Base64 do token ($INPUT_TOKEN_BASE64) NÃO encontrado. Autenticação Python dependerá do refresh ou falhará."
          fi
          echo "--- Fim da decodificação ---"

      - name: Inspecionar client_secret.json decodificado
        run: |
          echo "--- Conteúdo de credentials/client_secret.json (Limitado) ---"
          if [ -f "credentials/client_secret.json" ]; then
            head -c 500 credentials/client_secret.json
            echo ""
          else
            echo "Arquivo credentials/client_secret.json NÃO encontrado para inspeção."
          fi
          echo "--- Fim da inspeção de client_secret.json ---"
        continue-on-error: true # Não falhar o build se este passo de debug falhar

      - name: Inspecionar token.json decodificado
        run: |
          echo "--- Conteúdo de credentials/token.json (Limitado) ---"
          if [ -f "credentials/token.json" ]; then
            head -c 500 credentials/token.json
            echo ""
          else
            echo "Arquivo credentials/token.json NÃO encontrado para inspeção."
          fi
          echo "--- Fim da inspeção de token.json ---"
        continue-on-error: true # Não falhar o build se este passo de debug falhar

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Certifique-se que esta é a versão que você quer

      - name: Install ImageMagick # NOVO PASSO
        run: |
          echo "Tentando instalar ImageMagick..."
          sudo apt-get update -y
          sudo apt-get install -y imagemagick
          echo "Verificando instalação do ImageMagick e caminho do 'convert':"
          which convert || echo "'convert' não encontrado no PATH"
          convert -version || echo "Falha ao executar 'convert -version'"
          echo "Listando arquivos em /usr/bin/ para verificar 'convert':"
          ls -l /usr/bin/convert || echo "'/usr/bin/convert' não existe"


      - name: Limpar cache do pip
        run: pip cache purge

      - name: Instalar dependências
        run: pip install --upgrade -r requirements.txt

      - name: Executar Script de Automação
        run: python -u scripts/main.py --channel "fizzquirk" # Substitua "fizzquirk" se necessário
        env:
          # Se você tiver secrets do GitHub (ex: API keys para outras APIs), pode passá-los como variáveis de ambiente
          # PYTHONIOENCODING: "UTF-8" # Já deve ser o padrão, mas pode ser explícito se houver problemas de encoding
          # GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY_SEU_SECRET }}
          EXAMPLE_SECRET: ${{ secrets.EXAMPLE_SECRET_PARA_TESTE }}

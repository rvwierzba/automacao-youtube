name: Build e Validação

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 1. Checkout do Repositório
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # 2. Configurar Python
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3. Instalar Dependências
      - name: Instalar Dependências
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Configurar Git
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 5. Criar Pasta de Credenciais
      - name: Criar Pasta de Credenciais
        run: mkdir -p credentials

      # 6. Decodificar Client Secret
      - name: Decodificar Client Secret
        run: |
          echo "$CLIENT_SECRET_FILE_FIZZQUIRK" | base64 --decode > credentials/client_secret.json
        env:
          CLIENT_SECRET_FILE_FIZZQUIRK: ${{ secrets.CLIENT_SECRET_FILE_FIZZQUIRK }}

      # 7. Decodificar Token
      - name: Decodificar Token
        run: |
          echo "$TOKEN_FILE_FIZZQUIRK" | base64 --decode > credentials/token.json
        env:
          TOKEN_FILE_FIZZQUIRK: ${{ secrets.TOKEN_FILE_FIZZQUIRK }}

      # 8. Validar Arquivos de Credenciais
      - name: Validar Arquivos de Credenciais
        run: |
          # Instalar jq para validar JSON
          sudo apt-get update
          sudo apt-get install -y jq

          # Verificar se client_secret.json está bem formado
          jq empty credentials/client_secret.json || { echo "Erro: client_secret.json está malformado."; exit 1; }

          # Verificar campos essenciais no client_secret.json
          REQUIRED_FIELDS=("token_uri" "client_email")
          for field in "${REQUIRED_FIELDS[@]}"; do
            value=$(jq -r ."${field}" credentials/client_secret.json)
            if [[ "$value" == "null" || -z "$value" ]]; then
              echo "Erro: Campo '${field}' está ausente no client_secret.json."
              exit 1
            fi
          done
          echo "client_secret.json validado com sucesso."

          # Verificar se token.json está bem formado
          jq empty credentials/token.json || { echo "Erro: token.json está malformado."; exit 1; }
          echo "token.json validado com sucesso."

      # 9. Adicionar Etapas de Depuração (Opcional)
      - name: Verificar Existência dos Arquivos Decodificados
        run: |
          if [ -f credentials/client_secret.json ]; then
            echo "client_secret.json existe."
            echo "Campos presentes: $(jq 'keys' credentials/client_secret.json)"
          else
            echo "Erro: client_secret.json não encontrado."
            exit 1
          fi

          if [ -f credentials/token.json ]; then
            echo "token.json existe."
            echo "Campos presentes: $(jq 'keys' credentials/token.json)"
          else
            echo "Erro: token.json não encontrado."
            exit 1
          fi

      # 10. Post Steps (Sempre Executadas)
      - name: Post Checkout do repositório
        if: always()
        run: |
          echo "Workflow concluído."

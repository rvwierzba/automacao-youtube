name: Automatizar YouTube Video

on:
  workflow_dispatch: # Permite acionamento manual
  # push:
  #   branches: [ main ] # Descomente para acionar em push para a main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create credentials directory
        run: |
          echo "Criando pasta credentials/..."
          mkdir -p credentials
          echo "Pasta credentials/ criada."

      - name: Decodificar arquivos .base64 do Repositório
        run: |
          echo "--- Iniciando decodificação dos arquivos Base64 do Repositório ---"
          
          INPUT_CS_BASE64="credentials/canal1_client_secret.json.base64"
          OUTPUT_CS_JSON="credentials/client_secret.json"
          if [ -f "$INPUT_CS_BASE64" ]; then
            echo "Decodificando client_secret de $INPUT_CS_BASE64 para $OUTPUT_CS_JSON..."
            openssl base64 -d -in "$INPUT_CS_BASE64" -out "$OUTPUT_CS_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_CS_JSON" ]; then 
              echo "ERRO CRÍTICO: Falha ao decodificar client_secret ou o arquivo JSON resultante está vazio."
              exit 1
            fi
            echo "client_secret.json decodificado com sucesso."
          else
            echo "ERRO CRÍTICO: Arquivo Base64 do client_secret ($INPUT_CS_BASE64) NÃO encontrado."
            exit 1
          fi
          
          INPUT_TOKEN_BASE64="credentials/canal1_token.json.base64"
          OUTPUT_TOKEN_JSON="credentials/token.json"
          if [ -f "$INPUT_TOKEN_BASE64" ]; then
            echo "Decodificando token de $INPUT_TOKEN_BASE64 para $OUTPUT_TOKEN_JSON..."
            openssl base64 -d -in "$INPUT_TOKEN_BASE64" -out "$OUTPUT_TOKEN_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_TOKEN_JSON" ]; then
              echo "AVISO: Falha ao decodificar token ou o arquivo JSON resultante está vazio. O script Python tentará o refresh."
            else
              echo "token.json decodificado com sucesso."
            fi
          else
            echo "AVISO: Arquivo Base64 do token (<span class="math-inline">INPUT\_TOKEN\_BASE64\) NÃO encontrado\. Autenticação Python dependerá do refresh ou falhará\."
fi
echo "\-\-\- Fim da decodificação \-\-\-"
\- name\: Inspecionar client\_secret\.json decodificado
if\: always\(\) \# Executar mesmo se passos anteriores falharem, para debug
run\: \|
echo "\-\-\- Conteúdo de credentials/client\_secret\.json \(Limitado\) \-\-\-"
if \[ \-f "credentials/client\_secret\.json" \]; then
head \-c 500 credentials/client\_secret\.json && echo
else
echo "Arquivo credentials/client\_secret\.json NÃO encontrado para inspeção\."
fi
echo "\-\-\- Fim da inspeção de client\_secret\.json \-\-\-"
continue\-on\-error\: true
\- name\: Inspecionar token\.json decodificado
if\: always\(\) \# Executar mesmo se passos anteriores falharem, para debug
run\: \|
echo "\-\-\- Conteúdo de credentials/token\.json \(Limitado\) \-\-\-"
if \[ \-f "credentials/token\.json" \]; then
head \-c 500 credentials/token\.json && echo
else
echo "Arquivo credentials/token\.json NÃO encontrado para inspeção\."
fi
echo "\-\-\- Fim da inspeção de token\.json \-\-\-"
continue\-on\-error\: true
\- name\: Configurar Python
uses\: actions/setup\-python@v4
with\:
python\-version\: '3\.9'
\- name\: Install ImageMagick and Adjust Policy \# PASSO ATUALIZADO
run\: \|
echo "Tentando instalar ImageMagick\.\.\."
sudo apt\-get update \-y
sudo apt\-get install \-y imagemagick
echo "Verificando instalação do ImageMagick e caminho do 'convert'\:"
which convert \|\| echo "'convert' não encontrado no PATH"
convert \-version \|\| echo "Falha ao executar 'convert \-version'"
echo "Tentando localizar e modificar policy\.xml do ImageMagick\.\.\."
POLICY\_XML\_PATH\=</span>(convert -debug configure /dev/null 2>&1 | grep -oP "Searching for configure file:.*/policy.xml" | sed 's/Searching for configure file: //')
          
          if [ -z "<span class="math-inline">POLICY\_XML\_PATH" \]; then
\# Fallback para caminhos comuns se a detecção automática falhar
COMMON\_POLICY\_PATHS\=\("/etc/ImageMagick\-6/policy\.xml" "/etc/ImageMagick/policy\.xml" "/usr/local/etc/ImageMagick\-6/policy\.xml" "/usr/share/ImageMagick\-6/policy\.xml"\)
for p\_path in "</span>{COMMON_POLICY_PATHS[@]}"; do
              if [ -f "$p_path" ]; then
                POLICY_XML_PATH="$p_path"
                break
              fi
            done
          fi

          if [ -f "$POLICY_XML_PATH" ]; then
            echo "Arquivo policy.xml encontrado em: $POLICY_XML_PATH"
            sudo cp "<span class="math-inline">POLICY\_XML\_PATH" "</span>{POLICY_XML_PATH}.bak"
            echo "Backup de policy.xml criado em ${POLICY_XML_PATH}.bak"
            
            echo "Modificando $POLICY_XML_PATH para permitir operações do TextClip..."
            # Comentar políticas restritivas. Adicionando permissões de leitura/escrita para HTTPS, HTTP, URL, FTP, FILE, MVG, MSL, TEXT, LABEL, PATH.
            # Isso é bastante permissivo; ajuste se necessário para seu caso de uso específico.
            # A política que bloqueia '@' é tipicamente a de 'path' ou indiretamente 'TEXT'/'LABEL'.
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="TEXT" \/>//' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="LABEL" \/>//' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MVG" \/>//' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MSL" \/>//' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*" \/>//' "$POLICY_XML_PATH"
            # Se a política específica de @* não existir, pode ser uma mais genérica:
            sudo sed -i 's/<policy domain="path" rights="none" pattern="\*"\/>//' "$POLICY_XML_PATH"

            # Opcionalmente, adicionar políticas de leitura explícitas se comentar não for suficiente (mais seguro que rights="read|write")
            # sudo sed -i '/<\/policymap>/i <policy domain="coder" rights="read" pattern="TEXT" />' "$POLICY_XML_PATH"
            # sudo sed -i '/<\/policymap>/i <policy domain="coder" rights="read" pattern="LABEL" />' "$POLICY_XML_PATH"
            # sudo sed -i '/<\/policymap>/i <policy domain="path" rights="read" pattern="@*" />' "$POLICY_XML_PATH"
            
            echo "Conteúdo de $POLICY_XML_PATH após modificação (linhas relevantes):"
            sudo grep -iE 'domain="path"|domain="coder"' "$POLICY_XML_PATH" || echo "Nenhuma política de path/coder encontrada após sed."
          else
            echo "AVISO CRÍTICO: policy.xml do ImageMagick não foi encontrado automaticamente ou nos caminhos comuns. MoviePy TextClip pode falhar."
          fi
          echo "Instalação e ajuste da política do ImageMagick concluídos."

      - name: Limpar cache do pip
        run: pip cache purge

      - name: Instalar dependências
        run: pip install --upgrade -r requirements.txt

      - name: Executar Script de Automação
        run: python -u scripts/main.py --channel "fizzquirk" # Substitua "fizzquirk" se necessário
        env:
          EXAMPLE_SECRET: ${{ secrets.EXAMPLE_SECRET_PARA_TESTE }} # Apenas exemplo, remova se não usar

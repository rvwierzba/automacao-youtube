name: Automação YouTube

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # Definição de variáveis de ambiente
    env:
      QUANTIDADE: 10  # Defina o valor desejado para QUANTIDADE aqui
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
      PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}

    steps:
      # 1. Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configuração do Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3. Instalação das dependências
      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      # 4. Configuração do Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 5. Criação do Arquivo de Segredo do Cliente
      - name: Create Client Secret File
        run: |
          echo "${{ secrets.CLIENT_SECRET_FILE_FIZZQUIRK }}" | base64 --decode > client_secret.json

      # 6. Criação do Arquivo de Token
      - name: Create Token File
        run: |
          echo "${{ secrets.TOKEN_FILE_FIZZQUIRK }}" | base64 --decode > token.json

      # 7. Geração do Vídeo
      - name: Generate Video
        id: generate_video  # ID para referenciar o passo posteriormente
        run: |
          source venv/bin/activate
          echo "Iniciando a geração do vídeo com as seguintes variáveis:"
          echo "GEMINI_API_KEY: $GEMINI_API_KEY"
          echo "YOUTUBE_CHANNEL_ID: $YOUTUBE_CHANNEL_ID"
          echo "PIXABAY_API_KEY: $PIXABAY_API_KEY"
          echo "QUANTIDADE: $QUANTIDADE"
          python scripts/main.py \
            --gemini-api "$GEMINI_API_KEY" \
            --youtube-channel "$YOUTUBE_CHANNEL_ID" \
            --pixabay-api "$PIXABAY_API_KEY" \
            --quantidade "$QUANTIDADE" | tee main_output.log

      # 8. Verificação da Geração do Vídeo
      - name: Verify Video Generation
        run: |
          echo "Verificando a geração do vídeo..."
          if [ ! -f "video_final.mp4" ]; then
            echo "Erro: O arquivo de vídeo 'video_final.mp4' não foi encontrado."
            exit 1
          else
            echo "Arquivo 'video_final.mp4' encontrado com sucesso."
          fi

      # 9. Passo de Depuração: Listar Arquivos e Diretórios
      - name: List Files and Directories
        run: |
          echo "Diretório Atual:"
          pwd
          echo "Conteúdo do Diretório Atual:"
          ls -la
          echo "Conteúdo de Subdiretórios:"
          find . -type f

      # 10. Exibir Logs da Geração do Vídeo
      - name: Exibir Logs da Geração do Vídeo
        if: success()
        run: cat main_output.log

      # 11. Verificar Dependências Instaladas
      - name: Verificar Dependências Instaladas
        if: success()
        run: pip list

      # 12. Upload para o YouTube
      - name: Upload to YouTube
        if: success() && steps.generate_video.outcome == 'success'
        run: |
          # Adicione aqui os comandos para fazer upload para o YouTube
          echo "Upload para o YouTube não implementado."

      # 13. Passos Pós Execução
      - name: Post Set up Python
        if: always()
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Post Checkout repository
        if: always()
        run: |
          git config --global --add safe.directory /home/runner/work/automacao-youtube/automacao-youtube

      - name: Complete job
        if: always()
        run: echo "Workflow concluído."


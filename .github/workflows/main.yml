name: Build and Upload Video

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: false

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      # Step 4: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 5: Create Client Secret File
      - name: Create Client Secret File
        run: |
          echo "${{ secrets.CLIENT_SECRET_FILE_FIZZQUIRK }}" | base64 --decode > client_secret.json

      # Step 6: Create Token File
      - name: Create Token File
        run: |
          echo "${{ secrets.TOKEN_FILE_FIZZQUIRK }}" | base64 --decode > token.json

      # Step 7: Generate Video
      - name: Generate Video
        id: generate_video
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          YOUTUBE_CHANNEL_ID: ${{ secrets.YOUTUBE_CHANNEL_ID }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          QUANTIDADE: ${{ secrets.QUANTIDADE }}
        run: |
          source venv/bin/activate
          echo "Iniciando a geração do vídeo com as seguintes variáveis:"
          echo "GEMINI_API_KEY: $GEMINI_API_KEY"
          echo "YOUTUBE_CHANNEL_ID: $YOUTUBE_CHANNEL_ID"
          echo "PIXABAY_API_KEY: $PIXABAY_API_KEY"
          echo "QUANTIDADE: $QUANTIDADE"
          python scripts/main.py \
            --gemini-api "$GEMINI_API_KEY" \
            --youtube-channel "$YOUTUBE_CHANNEL_ID" \
            --pixabay-api "$PIXABAY_API_KEY" \
            --quantidade "$QUANTIDADE" | tee main_output.log

      # Step 8: Verify Video Generation
      - name: Verify Video Generation
        run: |
          if [ ! -f "video_final.mp4" ]; then
            echo "Erro: O arquivo de vídeo 'video_final.mp4' não foi encontrado."
            exit 1
          else
            echo "Arquivo 'video_final.mp4' encontrado com sucesso."
          fi

      # Step 9: Listar Arquivos Após Geração do Vídeo
      - name: Listar Arquivos Após Geração do Vídeo
        run: |
          echo ">>> Listando arquivos no diretório atual:"
          ls -la
          echo ">>> Listando arquivos no diretório de saída (se houver):"
          if [ -d "output" ]; then
            ls -la output/
          else
            echo "Diretório 'output' não encontrado."
          fi
          echo ">>> Verificando a existência de 'video_final.mp4':"
          ls -la | grep video_final.mp4 || echo "Arquivo 'video_final.mp4' não encontrado."

      # Step 10: Exibir Logs da Geração do Vídeo
      - name: Exibir Logs da Geração do Vídeo
        run: |
          echo ">>> Exibindo logs da geração do vídeo:"
          cat main_output.log || echo "Arquivo 'main_output.log' não encontrado."

      # Step 11: Verificar Dependências Instaladas
      - name: Verificar Dependências Instaladas
        run: |
          source venv/bin/activate
          pip list

      # Step 12: Upload to YouTube
      - name: Upload to YouTube
        if: success() && steps.generate_video.outcome == 'success'
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          source venv/bin/activate
          echo "Iniciando upload para o YouTube..."
          python scripts/upload_youtube.py \
            --video-file "video_final.mp4" \
            --client-secret-file "client_secret.json" \
            --token-file "token.json" \
            --title "Curiosidades do Dia" \
            --description "Confira essas curiosidades incríveis!" \
            --category "22" \
            --tags "curiosidades,fatos,informação"

      # Step 13: Post Set up Python (opcional)
      - name: Post Set up Python
        if: always()
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 14: Post Checkout repository (opcional)
      - name: Post Checkout repository
        if: always()
        run: |
          git config --global --add safe.directory /home/runner/work/automacao-youtube/automacao-youtube


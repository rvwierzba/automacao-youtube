name: Automação YouTube

on:
  workflow_dispatch:  # Permite execução manual
  push:
    branches:
      - main  # Executa no push para main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Run actions/checkout@v3
      uses: actions/checkout@v3
      # Remova o with com working-directory, se houver

    # Decodifica os arquivos ANTES de configurar o Python e instalar dependências.
    # NOTA: Mantenha este passo ANTES da instalação de dependências.
    - name: Decodificar client_secret.json.base64 e token.json.base64
      run: |
        echo "--- Iniciando decodificação dos arquivos de credenciais ---"
        # Certifique-se de que a pasta credentials existe
        mkdir -p credentials
        
        # --- Processar client_secret ---
        INPUT_CS_BASE64="credentials/canal1_client_secret.json.base64"
        OUTPUT_CS_JSON="credentials/client_secret.json"
        
        echo "Processando client_secret..."
        if [ -f "$INPUT_CS_BASE64" ]; then
          echo "Arquivo Base64 de entrada ($INPUT_CS_BASE64) encontrado."
          echo "Conteúdo bruto do Base64 (primeiros 50 caracteres):"
          head -c 50 "$INPUT_CS_BASE64"
          echo "" # Quebra de linha
          
          openssl base64 -d -in "$INPUT_CS_BASE64" -out "$OUTPUT_CS_JSON"
          
          if [ $? -eq 0 ]; then
            echo "Comando openssl base64 -d para client_secret executado com sucesso."
            if [ -s "$OUTPUT_CS_JSON" ]; then
              echo "Arquivo de saída ($OUTPUT_CS_JSON) criado com sucesso e não vazio."
            else
              echo "AVISO: Arquivo de saída ($OUTPUT_CS_JSON) criado, mas está vazio! Verifique o conteúdo do arquivo base64 de entrada."
            fi
          else
            echo "ERRO: Falha na execução do comando openssl base64 -d para client_secret."
            exit 1 # Falha no step se a decodificação falhar
          fi
        else
          echo "ERRO: Arquivo Base64 do client_secret NÃO encontrado: $INPUT_CS_BASE64"
          exit 1 # Falha no step se o arquivo Base64 não existir
        fi
        
        echo "---"
        
        # --- Processar token ---
        INPUT_TOKEN_BASE64="credentials/canal1_token.json.base64"
        OUTPUT_TOKEN_JSON="credentials/token.json"
        
        echo "Processando token..."
        if [ -f "$INPUT_TOKEN_BASE64" ]; then
          echo "Arquivo Base64 de entrada ($INPUT_TOKEN_BASE64) encontrado."
           echo "Conteúdo bruto do Base64 (primeiros 50 caracteres):"
          head -c 50 "$INPUT_TOKEN_BASE64"
          echo "" # Quebra de linha
          
          openssl base64 -d -in "$INPUT_TOKEN_BASE64" -out "$OUTPUT_TOKEN_JSON"
          
          if [ $? -eq 0 ]; then
            echo "Comando openssl base64 -d para token executado com sucesso."
            if [ -s "$OUTPUT_TOKEN_JSON" ]; then
              echo "Arquivo de saída ($OUTPUT_TOKEN_JSON) criado com sucesso e não vazio."
            else
              echo "AVISO: Arquivo de saída ($OUTPUT_TOKEN_JSON) criado, mas está vazio! Verifique o conteúdo do arquivo base64 de entrada."
              # Não damos exit 1 aqui para ver o que acontece no script Python, mas é um aviso sério.
            fi
          else
            echo "ERRO: Falha na execução do comando openssl base64 -d para token."
             # Não damos exit 1 aqui para ver o erro subsequente no script Python, mas é um aviso sério.
          fi
        else
          echo "AVISO: Arquivo Base64 do token NÃO encontrado: $INPUT_TOKEN_BASE64. O script Python provavelmente falhará ao tentar carregá-lo."
          # Não damos exit 1 aqui para ver o erro subsequente no script Python.
        fi
        echo "--- Fim da decodificação ---"


    # --- PASSOS DE INSPEÇÃO (manter) ---
    # Estes passos vão imprimir o início dos arquivos decodificados no log para debug
    - name: Inspecionar client_secret.json decodificado
      run: |
        echo "--- Conteúdo de credentials/client_secret.json (Primeiros 20 bytes em Hex) ---"
        if [ -f "credentials/client_secret.json" ]; then
          head -c 20 credentials/client_secret.json | hexdump -C
          echo "--- Conteúdo de credentials/client_secret.json (Completo) ---"
          # Limita o cat a, digamos, 500 caracteres para não poluir muito o log se for um arquivo grande
          head -c 500 credentials/client_secret.json
          echo "" # Quebra de linha
        else
          echo "Arquivo credentials/client_secret.json NÃO encontrado após decodificação."
        fi
        echo "--- Fim da inspeção de client_secret.json ---"
      continue-on-error: true # Permite que o resto do workflow continue

    - name: Inspecionar token.json decodificado
      run: |
        echo "--- Conteúdo de credentials/token.json (Primeiros 20 bytes em Hex) ---"
        if [ -f "credentials/token.json" ]; then
          head -c 20 credentials/token.json | hexdump -C
          echo "--- Conteúdo de credentials/token.json (Completo) ---"
          head -c 500 credentials/token.json
          echo "" # Quebra de linha
        else
          echo "Arquivo credentials/token.json NÃO encontrado após decodificação."
        fi
        echo "--- Fim da inspeção de token.json ---"
      continue-on-error: true # Permite que o resto do workflow continue
    # --- FIM DOS NOVOS PASSOS ---

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Limpar cache do pip
      run: pip cache purge

    - name: Instalar dependências
      run: pip install --upgrade -r requirements.txt

    - name: Executar Script de Automação
      run: python scripts/main.py --channel "fizzquirk"

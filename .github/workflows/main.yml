name: Gerar e Publicar Vídeos FizzQuirk

on:
  workflow_dispatch: # Permite execução manual
  schedule:
    - cron: '0 11 * * *'  # Exemplo: Todo dia às 11:00 UTC (8:00 AM BRT / UTC-3)
    - cron: '0 21 * * *' # Exemplo: Todo dia às 21:00 UTC (6:00 PM BRT / UTC-3)

jobs:
  build_and_publish_fizzquirk: 
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true 

      - name: Create credentials directory
        run: |
          echo "Criando pasta credentials/..."
          mkdir -p credentials
          echo "Pasta credentials/ criada."

      - name: Decodificar arquivos .base64 do Repositório
        # Adapte os nomes dos arquivos INPUT se os seus forem diferentes.
        run: |
          echo "--- Iniciando decodificação dos arquivos Base64 do Repositório ---"
          INPUT_CS_BASE64="credentials/canal1_client_secret.json.base64" 
          OUTPUT_CS_JSON="credentials/client_secret.json"
          if [ -f "$INPUT_CS_BASE64" ]; then
            echo "Decodificando client_secret de $INPUT_CS_BASE64 para $OUTPUT_CS_JSON..."
            openssl base64 -d -in "$INPUT_CS_BASE64" -out "$OUTPUT_CS_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_CS_JSON" ]; then 
              echo "ERRO CRÍTICO: Falha ao decodificar client_secret ou o arquivo JSON resultante está vazio."
              exit 1
            fi
            echo "client_secret.json decodificado com sucesso."
          else
            echo "ERRO CRÍTICO: Arquivo Base64 do client_secret ($INPUT_CS_BASE64) NÃO encontrado."
            exit 1
          fi

          INPUT_TOKEN_BASE64="credentials/canal1_token.json.base64" 
          OUTPUT_TOKEN_JSON="credentials/token.json"
          if [ -f "$INPUT_TOKEN_BASE64" ]; then
            echo "Decodificando token de $INPUT_TOKEN_BASE64 para $OUTPUT_TOKEN_JSON..."
            openssl base64 -d -in "$INPUT_TOKEN_BASE64" -out "$OUTPUT_TOKEN_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_TOKEN_JSON" ]; then
              echo "AVISO: Falha ao decodificar token ou o arquivo JSON resultante está vazio."
            else
              echo "token.json decodificado com sucesso."
            fi
          else
            echo "AVISO: Arquivo Base64 do token ($INPUT_TOKEN_BASE64) NÃO encontrado."
          fi
          echo "--- Fim da decodificação ---"

      - name: Inspecionar client_secret.json decodificado
        if: always()
        run: |
          echo "--- Conteúdo de credentials/client_secret.json (Limitado) ---"
          if [ -f "credentials/client_secret.json" ]; then head -c 500 credentials/client_secret.json && echo; else echo "Arquivo credentials/client_secret.json NÃO encontrado."; fi
          echo "--- Fim da inspeção de client_secret.json ---"

      - name: Inspecionar token.json decodificado
        if: always()
        run: |
          echo "--- Conteúdo de credentials/token.json (Limitado) ---"
          if [ -f "credentials/token.json" ]; then head -c 500 credentials/token.json && echo; else echo "Arquivo credentials/token.json NÃO encontrado."; fi
          echo "--- Fim da inspeção de token.json ---"
      
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install ImageMagick and Adjust Policy
        run: |
          echo "Tentando instalar ImageMagick..."
          sudo apt-get update -y
          sudo apt-get install -y imagemagick
          echo "Verificando instalação do ImageMagick..."
          which convert || echo "'convert' não encontrado no PATH"
          convert -version || echo "Falha ao executar 'convert -version'"
          POLICY_XML_PATH=$(convert -debug configure /dev/null 2>&1 | grep -oP "Searching for configure file:\s*\K[^']+(?=')" | head -n 1)
          if [ -z "$POLICY_XML_PATH" ] || [ ! -f "$POLICY_XML_PATH" ]; then
            echo "POLICY_XML_PATH não encontrado via 'convert -debug'. Tentando caminhos comuns..."
            _COMMON_POLICY_PATHS_STR="/etc/ImageMagick-6/policy.xml /etc/ImageMagick/policy.xml /usr/local/etc/ImageMagick-6/policy.xml /usr/share/ImageMagick-6/policy.xml"
            for p_path in $_COMMON_POLICY_PATHS_STR; do 
              if [ -f "$p_path" ]; then POLICY_XML_PATH="$p_path"; echo "Encontrado policy.xml no fallback: $POLICY_XML_PATH"; break; fi
            done
          fi
          if [ -f "$POLICY_XML_PATH" ]; then
            echo "Arquivo policy.xml encontrado em: $POLICY_XML_PATH"; sudo cp "$POLICY_XML_PATH" "${POLICY_XML_PATH}.bak"
            echo "Modificando $POLICY_XML_PATH..."; 
            sudo sed -i.bak 's/<policy domain="coder" rights="none" pattern="TEXT" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="LABEL" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MVG" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MSL" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*"\/>//g' "$POLICY_XML_PATH" 
            sudo sed -i 's/<policy domain="path" rights="none" pattern="\*"\/>//g' "$POLICY_XML_PATH"
            echo "Conteúdo de $POLICY_XML_PATH após modificação:"; sudo grep -iE 'domain="path"|domain="coder"' "$POLICY_XML_PATH" || echo "Nenhuma política de path/coder relevante encontrada."
          else 
            echo "AVISO CRÍTICO: policy.xml do ImageMagick não foi encontrado. TextClip pode falhar."
          fi
          echo "Ajuste da política do ImageMagick concluído."

      - name: Limpar cache do pip
        run: pip cache purge

      - name: Instalar dependências
        run: pip install --upgrade -r requirements.txt

      - name: Executar Script de Automação
        env:
          # Estas são para o futuro, quando integrarmos IA para gerar conteúdo ou imagens.
          # Por agora, o script main.py não as utiliza.
          # GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY_JSON_PATH }} 
          # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          # GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          # GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} 
        run: python -u scripts/main.py --channel "fizzquirk"
        
      - name: Commit e push topic_history.txt
        if: success() 
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -f topic_history.txt ]; then
            # Adiciona o arquivo ao staging para verificar se há mudanças
            git add topic_history.txt
            # Verifica se há mudanças no arquivo topic_history.txt prontas para commit
            if ! git diff --staged --quiet; then
              echo "topic_history.txt modificado, fazendo commit e push..."
              git commit -m "Update topic history [skip ci]"
              git push
            else
              echo "Nenhuma alteração no topic_history.txt para commitar."
            fi
          else
            echo "Arquivo topic_history.txt não encontrado para commitar (pode ser a primeira execução ou o script não o criou)."
          fi

# .github/workflows/main.yml

name: Automação de Vídeos para YouTube

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'  # Diariamente às 05:00 UTC
    - cron: '0 19 * * *' # Diariamente às 19:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do Código
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Instalar Dependências Python
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      # Passo 4: Instalar e Configurar ImageMagick 6
      - name: Install and Configure ImageMagick 6
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

          # Verificar a versão instalada
          convert --version

          # Identificar o caminho do policy.xml
          POLICY_FILE=$(convert -list policy | grep -i "policy file" | awk '{print $4}')
          echo "Caminho do policy.xml: $POLICY_FILE"

          # Fazer backup do arquivo policy.xml original
          sudo cp "$POLICY_FILE" "${POLICY_FILE}.bak"

          # Comentar todas as linhas que contêm 'pattern="PNG' (incluindo variações como 'PNG32')
          sudo sed -i '/pattern="PNG[^"]*"/ s/^/<!-- /; /pattern="PNG[^"]*"/ s/$/ -->/' "$POLICY_FILE"

          # Adicionar uma nova linha que permite leitura e escrita para todas as variações de PNG
          echo '<policy domain="coder" rights="read|write" pattern="PNG*" />' | sudo tee -a "$POLICY_FILE"

          # Verificar se a modificação foi aplicada
          echo "Conteúdo atualizado de $POLICY_FILE:"
          grep 'pattern="PNG"' "$POLICY_FILE" || echo "Nenhuma política PNG encontrada."
        shell: bash

      # Passo 4.1: Exibir o Conteúdo Atualizado do `policy.xml` para Depuração (Opcional)
      - name: Display Updated ImageMagick Policy
        run: |
          POLICY_FILE=$(convert -list policy | grep -i "policy file" | awk '{print $4}')
          echo "Conteúdo atualizado de $POLICY_FILE:"
          grep 'pattern="PNG"' "$POLICY_FILE" || echo "Nenhuma política PNG encontrada."
        shell: bash

      # Passo 4.2: Verificar Permissões do Diretório /tmp
      - name: Check /tmp Permissions
        run: |
          ls -ld /tmp
        shell: bash

      # Passo 5: Decodificar e Criar Arquivos de Credenciais para Cada Canal
      - name: Decode Secrets and Create JSON Files
        run: |
          mkdir -p credentials
          # fizzquirk
          echo "${{ secrets.CLIENT_SECRET_FILE_fizzquirk }}" | base64 --decode > credentials/canal1_client_secret.json
          echo "${{ secrets.TOKEN_FILE_fizzquirk }}" | base64 --decode > credentials/canal1_token.json

          # Adicione mais canais conforme necessário
        shell: bash

      # Passo 5.1: Verificar os Arquivos Decodificados (Depuração)
      - name: Verify Credentials Files
        run: |
          if [ -s credentials/canal1_client_secret.json ]; then
            echo "client_secret.json foi decodificado com sucesso."
          else
            echo "Erro: client_secret.json está vazio ou não foi criado corretamente."
            exit 1
          fi

          if [ -s credentials/canal1_token.json ]; then
            echo "token.json foi decodificado com sucesso."
          else
            echo "Erro: token.json está vazio ou não foi criado corretamente."
            exit 1
          fi
        shell: bash

      # Passo 6: Configurar Variáveis de Ambiente
      - name: Set Environment Variables
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTUBE_CHANNEL_ID=${{ secrets.YOUTUBE_CHANNEL_ID }}" >> $GITHUB_ENV
        shell: bash

      # Passo 7: Executar o Script Principal
      - name: Run Main Script
        run: |
          python scripts/main.py
        shell: bash

      # Passo 8: Upload dos Vídeos Gerados (Opcional)
      - name: Upload Generated Videos
        uses: actions/upload-artifact@v3
        with:
          name: generated_videos
          path: generated_videos/
          if-no-files-found: warn
          include-hidden-files: false

      # Passo 9: Upload de Logs (Opcional)
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: logs/main.log
          if-no-files-found: warn
          include-hidden-files: false

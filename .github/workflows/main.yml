name: Automatizar YouTube Video

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create credentials directory
        run: |
          echo "Criando pasta credentials/..."
          mkdir -p credentials
          echo "Pasta credentials/ criada."

      - name: Decodificar arquivos .base64 do Repositório
        run: |
          echo "--- Iniciando decodificação dos arquivos Base64 do Repositório ---"
          
          INPUT_CS_BASE64="credentials/canal1_client_secret.json.base64"
          OUTPUT_CS_JSON="credentials/client_secret.json"
          if [ -f "$INPUT_CS_BASE64" ]; then
            echo "Decodificando client_secret de $INPUT_CS_BASE64 para $OUTPUT_CS_JSON..."
            openssl base64 -d -in "$INPUT_CS_BASE64" -out "$OUTPUT_CS_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_CS_JSON" ]; then 
              echo "ERRO CRÍTICO: Falha ao decodificar client_secret ou o arquivo JSON resultante está vazio."
              exit 1
            fi
            echo "client_secret.json decodificado com sucesso."
          else
            echo "ERRO CRÍTICO: Arquivo Base64 do client_secret ($INPUT_CS_BASE64) NÃO encontrado."
            exit 1
          fi
          
          INPUT_TOKEN_BASE64="credentials/canal1_token.json.base64"
          OUTPUT_TOKEN_JSON="credentials/token.json"
          if [ -f "$INPUT_TOKEN_BASE64" ]; then
            echo "Decodificando token de $INPUT_TOKEN_BASE64 para $OUTPUT_TOKEN_JSON..."
            openssl base64 -d -in "$INPUT_TOKEN_BASE64" -out "$OUTPUT_TOKEN_JSON"
            if [ $? -ne 0 ] || [ ! -s "$OUTPUT_TOKEN_JSON" ]; then
              echo "AVISO: Falha ao decodificar token ou o arquivo JSON resultante está vazio. O script Python tentará o refresh."
            else
              echo "token.json decodificado com sucesso."
            fi
          else
            echo "AVISO: Arquivo Base64 do token ($INPUT_TOKEN_BASE64) NÃO encontrado. Autenticação Python dependerá do refresh ou falhará."
          fi
          echo "--- Fim da decodificação ---"

      - name: Inspecionar client_secret.json decodificado
        if: always()
        run: |
          echo "--- Conteúdo de credentials/client_secret.json (Limitado) ---"
          if [ -f "credentials/client_secret.json" ]; then
            head -c 500 credentials/client_secret.json && echo
          else
            echo "Arquivo credentials/client_secret.json NÃO encontrado para inspeção."
          fi
          echo "--- Fim da inspeção de client_secret.json ---"
        continue-on-error: true

      - name: Inspecionar token.json decodificado
        if: always()
        run: |
          echo "--- Conteúdo de credentials/token.json (Limitado) ---"
          if [ -f "credentials/token.json" ]; then
            head -c 500 credentials/token.json && echo
          else
            echo "Arquivo credentials/token.json NÃO encontrado para inspeção."
          fi
          echo "--- Fim da inspeção de token.json ---"
        continue-on-error: true

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install ImageMagick and Adjust Policy # PASSO COM MODIFICAÇÃO NO LOOP
        run: |
          echo "Tentando instalar ImageMagick..."
          sudo apt-get update -y
          sudo apt-get install -y imagemagick
          echo "Verificando instalação do ImageMagick e caminho do 'convert':"
          which convert || echo "'convert' não encontrado no PATH"
          convert -version || echo "Falha ao executar 'convert -version'"
          
          echo "Tentando localizar e modificar policy.xml do ImageMagick..."
          POLICY_XML_PATH=$(convert -debug configure /dev/null 2>&1 | grep -oP "Searching for configure file:\s*\K[^']+(?=')" | head -n 1)

          if [ -z "$POLICY_XML_PATH" ] || [ ! -f "$POLICY_XML_PATH" ]; then
            echo "POLICY_XML_PATH não encontrado ou inválido via 'convert -debug'. Tentando caminhos comuns..."
            # Fallback para caminhos comuns se a detecção automática falhar
            _COMMON_POLICY_PATHS_STR="/etc/ImageMagick-6/policy.xml /etc/ImageMagick/policy.xml /usr/local/etc/ImageMagick-6/policy.xml /usr/share/ImageMagick-6/policy.xml"
            for p_path in $_COMMON_POLICY_PATHS_STR; do # Loop simplificado
              echo "Verificando fallback: $p_path"
              if [ -f "$p_path" ]; then
                POLICY_XML_PATH="$p_path"
                echo "Encontrado policy.xml no fallback: $POLICY_XML_PATH"
                break
              fi
            done
          fi

          if [ -f "$POLICY_XML_PATH" ]; then
            echo "Arquivo policy.xml encontrado em: $POLICY_XML_PATH"
            sudo cp "$POLICY_XML_PATH" "${POLICY_XML_PATH}.bak"
            echo "Backup de policy.xml criado em ${POLICY_XML_PATH}.bak"
            
            echo "Modificando $POLICY_XML_PATH para permitir operações do TextClip..."
            # Comenta políticas restritivas.
            sudo sed -i.bak 's/<policy domain="coder" rights="none" pattern="TEXT" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="LABEL" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MVG" \/>//g' "$POLICY_XML_PATH"
            sudo sed -i 's/<policy domain="coder" rights="none" pattern="MSL" \/>//g' "$POLICY_XML_PATH"
            # A política que bloqueia '@' é tipicamente a de 'path'.
            sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*"\/>//g' "$POLICY_XML_PATH"
            # Se a política específica de @* não existir, pode ser uma mais genérica para paths:
            sudo sed -i 's/<policy domain="path" rights="none" pattern="\*"\/>//g' "$POLICY_XML_PATH"
            
            echo "Conteúdo de $POLICY_XML_PATH após modificação (linhas relevantes de coder/path):"
            sudo grep -iE 'domain="path"|domain="coder"' "$POLICY_XML_PATH" || echo "Nenhuma política de path/coder encontrada após sed."
          else
            echo "AVISO CRÍTICO: policy.xml do ImageMagick não foi encontrado automaticamente ou nos caminhos comuns. MoviePy TextClip pode falhar."
          fi
          echo "Instalação e ajuste da política do ImageMagick concluídos."
          echo "Verificando novamente o executável 'convert':"
          ls -l /usr/bin/convert || echo "'/usr/bin/convert' ainda não existe ou não está acessível."


      - name: Limpar cache do pip
        run: pip cache purge

      - name: Instalar dependências
        run: pip install --upgrade -r requirements.txt

      - name: Executar Script de Automação
        run: python -u scripts/main.py --channel "fizzquirk"
        env:
          EXAMPLE_SECRET: ${{ secrets.EXAMPLE_SECRET_PARA_TESTE }}

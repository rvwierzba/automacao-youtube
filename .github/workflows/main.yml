name: build

# Define os eventos que acionam o workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do Repositório
      - name: Checkout do repositório
        uses: actions/checkout@v3

      # 2. Configuração do Python
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'          # Versão do Python a ser usada
          check-latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
          update-environment: true
          allow-prereleases: false

      # 3. Instalação de Dependências
      - name: Instalar Dependências
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Configuração do Git
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 5. Criação da Pasta de Credenciais
      - name: Criar Pasta de Credenciais
        run: mkdir -p credentials

      # 6. Decodificação do Client Secret
      - name: Decodificar Client Secret
        run: echo "${{ secrets.CLIENT_SECRET_FILE_FIZZQUIRK }}" | base64 --decode > credentials/client_secret.json

      # 7. Decodificação do Token
      - name: Decodificar Token
        run: echo "${{ secrets.TOKEN_FILE_FIZZQUIRK }}" | base64 --decode > credentials/token.json

      # 8. Validação dos Arquivos de Credenciais
      - name: Validar Arquivos de Credenciais
        run: |
          # Instalar jq para validar JSON
          sudo apt-get update
          sudo apt-get install -y jq

          # Verificar se client_secret.json está bem formado
          jq empty credentials/client_secret.json || { echo "Erro: client_secret.json está malformado."; exit 1; }

          # Verificar campos essenciais no client_secret.json
          REQUIRED_FIELDS=("token_uri" "client_email")
          for field in "${REQUIRED_FIELDS[@]}"; do
            value=$(jq -r ."${field}" credentials/client_secret.json)
            if [[ "$value" == "null" || -z "$value" ]]; then
              echo "Erro: Campo '${field}' está ausente no client_secret.json."
              exit 1
            else
              echo "Campo '${field}' presente."
            fi
          done
          echo "client_secret.json validado com sucesso."

          # Verificar se token.json está bem formado
          jq empty credentials/token.json || { echo "Erro: token.json está malformado."; exit 1; }
          echo "token.json validado com sucesso."

      # 9. Verificação da Existência dos Arquivos Decodificados
      - name: Verificar Existência dos Arquivos Decodificados
        if: ${{ success() }}
        run: |
          if [[ ! -f credentials/client_secret.json ]]; then
            echo "Erro: credentials/client_secret.json não existe."
            exit 1
          fi
          if [[ ! -f credentials/token.json ]]; then
            echo "Erro: credentials/token.json não existe."
            exit 1
          fi
          echo "Arquivos decodificados existem."

      # 10. Post Checkout do Repositório
      - name: Post Checkout do repositório
        run: echo "Workflow concluído."

      # Passos adicionais podem ser adicionados aqui conforme necessário

    # Fim do job 'build'
